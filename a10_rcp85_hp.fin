# name: um73-xe-new.end
# This script does post-processing and manages restart files for coupled
# AusCOM-UM run
#
# imported variables:
# OASISRUNDIR

function time2secs {

    # Split an hh:mm:ss.ss time stamp on colon and convert to seconds

    IFS=":"
    set -- $1
    hr=$(($1*3600))
    min=$(($2*60))
    sec=$(($3*1))

    echo "$((hr+min+sec))"
    
}

function timediff {

    # Compute the difference, in seconds, between two hh:mm:ss.ss time stamps

    t1=$(time2secs $1)
    t2=$(time2secs $2)

    echo $(($t1 - $t2)) 

}

function walltime {

    # Get the walltime for a PBS job, PBS_JOBID passed as a parameter
    echo $(qstat -f $1 | grep Resource_List.walltime | cut -d= -f2)

}

function elapsedtime {

    # Get the elapsed time for a PBS job, PBS_JOBID passed as a parameter
    echo $(qstat -f $1 | grep resources_used.walltime | cut -d= -f2)

}

function timeleft {

    # Compute the remaining time for a PBS job, PBS_JOBID passed as a parameter
    wtime=$(walltime $1)
    etime=$(elapsedtime $1)

    echo $( timediff $wtime $etime )

}

function epilogue {

    #############################################################################
    #
    # 7. Epilogue
    #
    #############################################################################

    date
    exit
}

function check_error {

    FCODE=$1

    if [[ $FCODE -eq 0 ]]; then
        echo "Experiment ran without error, post-processing ... "
	return true

    elif [[ ($FCODE -eq 1) || ($FCODE -eq 2) ]]; then
        echo "Experiment aborted with a transient error"
        echo "Rerunning"
	# Returning false means post-processing will not occur, but run
	# will continue. All other cases fall through to epilogue
	return false
	
    elif [[ ($FCODE -eq 3) || ($FCODE -eq 4) ]]; then
        echo "Experiment aborted with a transient error"
        echo "Re-try quota exceeded, suspending experiment"
        echo "`date` : ${jobnum} ${enddate} - Experiment suspended" >> ${expid}.log
        echo "To resume execute this command: qsub $RUNID"

    elif [[ $FCODE -eq 5 ]]; then
        # log the timesteps and coupling periods for the run
        # to the $RUNID.failed file
        # . tlog
        #. /home/599/dhb599/build_maciej/um7.3_precomp/tlog
        . tlog

        echo "Experiment aborted due to some model error, suspending"
        echo "To resume execute this command: qsub $RUNID"
        echo "`date` : ${jobnum} ${enddate} - Experiment suspended" >> ${expid}.log

    else
        echo "Experiment aborted with unknown error, suspending"
        echo "To resume execute this command: qsub $RUNID"
        echo "`date` : ${jobnum} ${enddate} - Experiment suspended" >> ${expid}.log

    fi # FCODE

    epilogue
}

function process_results {

    rundir=${OASISRUNDIR}
    cplrundir=$rundir/CPL_RUNDIR
    atmrundir=$rundir/ATM_RUNDIR
    icerundir=$rundir/ICE_RUNDIR
    ocnrundir=$rundir/OCN_RUNDIR
    
    # gol124: expdir replaces jobdir because JOBDIR is used by UM scripts
    expdir=$PBS_O_WORKDIR
    archivedir=${SHORTDIR}/archive/${RUNID}

    expid=$RUNID
    cd $expdir

    echo "Experiment completed OK, preparing next run"
    # log the timesteps and coupling periods for the run
    # to the $RUNID.tlog file
    # . tlog
    #. /home/599/dhb599/build_maciej/um7.3_precomp/tlog
    . $ACCESS_BINDIR/tlog


    # restore date variables from init script
    enddate=`cat calendar${RUNID}.out | cut -c '11-18'`
    nextdate=`cat calendar${RUNID}.out | cut -c '20-27'`
    days_in_run=`cat calendar${RUNID}.out | cut -c '38-45'`
    # another possibility:
    # enddate=`cat nextdate`
    # for UM:
    endyear=` echo "$enddate" | cut -c '1-4'`
    endmonth=` echo "$enddate" | cut -c '5-6'`
    endday=` echo "$enddate" | cut -c '7-8'`
    # for restart:
    nextyear=` echo "$nextdate" | cut -c '1-4'`
    nextmonth=` echo "$nextdate" | cut -c '5-6'`
    nextday=` echo "$nextdate" | cut -c '7-8'`

    # find out the ending of the dump file for enddate
    umdate=`${ACCESS_BINDIR}/datetoum3 ${nextyear} ${nextmonth} ${nextday} 0`
    restartfile="aiihca.da${umdate}"
    # gol124: human-readable file names for UM dumps
    restartarch="${RUNID}.astart-${nextdate}"

    # archive results and restart files created in this run
    cd $cplrundir

    #
    ## 5.1 Output files of the coupler (OASIS3)
    #

    # Restart files
    mkdir -p ${archivedir}/restart/cpl
    for resfile in `ls ?2?.nc`; do
	mv $resfile ${archivedir}/restart/cpl/$resfile-${enddate}
    done

    #
    ## 5.2 Output files of the atmosphere (UM)
    #

    cd $atmrundir
    # check the date
    if [ -f ${restartfile} ] ; then
	validdate=`${ACCESS_BINDIR}/umdate -b64 ${restartfile} | cut --delimiter=" " --fields=8`
	if [ ! ${validdate} = "${nextyear}-${nextmonth}-${nextday}" ] ; then
	    echo "The um restart file ${restartfile} has invalid date"
	    exit 1
	fi
        mv ${restartfile} ${archivedir}/restart/atm/${restartarch}
    else
	echo "The UM restart file ${restartfile} not found!"
        echo "This means the model most likely failed"
        echo "Aborting post-processing"
	exit 1
    fi
    # remove the other (older) atmospheric dumps
    rm -f aiihca.da*

    # move atmospheric monthly files to archive
    #mv aiihca.pe* ${archivedir}/atm
    # gol124: move and rename to human readable form
    for fmonth in `ls aiihca.pe*`; do
        sdate=`${ACCESS_BINDIR}/umdate -b64 ${fmonth} | cut --delimiter=" " --fields=8 | cut --delimiter="-" --output-delimiter=\0 --fields=1-3 `
        mv ${fmonth} ${archivedir}/history/atm/${RUNID}.pe-${sdate}
    done
    for fmonth in `ls aiihca.pa*`; do
        sdate=`${ACCESS_BINDIR}/umdate -b64 ${fmonth} | cut --delimiter=" " --fields=8 | cut --delimiter="-" --output-delimiter=\0 --fields=1-3 `
        mv ${fmonth} ${archivedir}/history/atm/${RUNID}.pa-${sdate}
    done
    for fmonth in `ls aiihca.pi*`; do
        sdate=`${ACCESS_BINDIR}/umdate -b64 ${fmonth} | cut --delimiter=" " --fields=8 | cut --delimiter="-" --output-delimiter=\0 --fields=1-3 `
        mv ${fmonth} ${archivedir}/history/atm/${RUNID}.pi-${sdate}
    done
    for fmonth in `ls aiihca.pj*`; do
        sdate=`${ACCESS_BINDIR}/umdate -b64 ${fmonth} | cut --delimiter=" " --fields=8 | cut --delimiter="-" --output-delimiter=\0 --fields=1-3 `
        mv ${fmonth} ${archivedir}/history/atm/${RUNID}.pj-${sdate}
    done

    #
    ## 5.3 Output files of the ice (cice)
    #

    cd $icerundir
    # Restart files

    #20100130: now w have extra 'restart' file mice.nc
    mv mice.nc ${archivedir}/restart/ice/mice.nc-${enddate}

    cd $icerundir/RESTART
    mv ice.restart_file ${archivedir}/restart/ice/ice.restart_file-${enddate}
    mv iced.* ${archivedir}/restart/ice/
    cd ..

    # History files (iceh_*.nc)
    cd $icerundir/HISTORY
    for histfile in `ls ice*`; do
	mv -f ${histfile} ${archivedir}/history/ice
    done

    #
    ## 5.4 Output files of the ocean (mom4)
    #

    # Restart files
    cd $ocnrundir/RESTART
    #mkdir -p ${archivedir}/mom/MOM4_restart_${enddate}
    #mv ocean_* ${archivedir}/mom/MOM4_restart_${enddate}
    for restfile in `ls ocean_*`; do
	mv ${restfile} ${archivedir}/restart/ocn/${restfile}-${enddate}
    done

    # History files
    cd $ocnrundir/HISTORY

    sdir=`pwd` 
    tdir=${archivedir}/history/ocn
    archjob=`qsub -v PROJECT,sdir=$sdir,tdir=$tdir,idate=${enddate},mppncombine_exec=$ACCESS_BINDIR/mppnccombine.RAIJIN $ACCESS_BINDIR/do_mppncombine-cmip5.ksh`

    #
    ## 5.5 Coupling fields output (if any), e.g., fields_i2o_in_ice.nc etc. 
    #
    for subrundir in $atmrundir $icerundir $ocnrundir; do
	cd $subrundir
	if [[ `ls fields*.nc | wc -w` -gt 0 ]]; then
	    for tmpfile in `ls fields*.nc`; do
		mv -f ${tmpfile} ${archivedir}/restart/cpl/${tmpfile}_${enddate}
	    done
	fi
    done
    #############################################################################
    #
    # 6. Submission of the next job
    #
    #############################################################################

    cd  ${expdir}
    #
    # Number of the next job
    #
    (( nextjob = ${jobnum} + 1 ))

    #
    # update .date and .log file
    #
    (( runtime = ${days_in_run} * 86400 ))
    if [ -f ${expid}.date ]; then
	#  read year month day jobnum yruntime0 truntime0 < ${expid}.date
	#read year month day jobnum truntime0 < ${expid}.date
	#mv ${expid}.date  ${expid}.date_${jobnum}
	tail -1 ${expid}.date | read year month day jobnum truntime0 
	echo "year month day jobnum truntime0": $year $month $day $jobnum $truntime0
    else
	#  yruntime0=0
	truntime0=0
	jobnum=1
    fi

    #
    # Number of the next job
    #
    (( nextjob = ${jobnum} + 1 ))

    #(( yruntime0 = ${yruntime0} + ${runtime} ))
    #(( truntime0 = ${truntime0} + ${runtime} ))
    # --- the above computation 'overflows' when year reaches 70: on XE it yields
    #     truntime0 = 1.84467440716e+19
    #     instead of  2175984000 which is the correct number.
    #     this causes CICE not to output history files!
    #     ('cos calendar does not work properly with the wrong truntime0...)
    # --- we have to use the follwoing calculation to avoid the overflow problem:
    truntime0=`expr ${truntime0} + ${runtime}`
    #echo "${nextyear} ${nextmonth} ${nextday} ${nextjob} ${yruntime0} ${truntime0}" > ${expid}.date
    echo "${nextyear} ${nextmonth} ${nextday} ${nextjob} ${truntime0}" >> ${expid}.date

    rm calendar${RUNID}.in calendar${RUNID}.out

    echo "`date` :  ${jobnum} ${enddate} - done post-processing!" >> ${expid}.log

}

function finalise_model {

    if check_error $FCODE; then
	process_results
    fi

}

function run_again {

    # Check if here is enough time to run another experiment

    # Check whether final date is reached
    tleft=$(timeleft $PBS_JOBID)
    rtime=$(time2secs $RUN_TIME)
    if [[ $tleft -gt $rtime ]]; then
	echo "Run another experiment as $tleft > $rtime" >> ${expid}.log
	return true
    else
	return false
    fi

}


function continue_experiment {

    # Check whether final date is reached
    if [[ $nextdate -gt $finaldate ]]; then
	echo "Experiment over"
	echo "`date` :  Experiment over" >> ${expid}.log
	return false
    elif [ -f ${expid}.suspend ] ; then
	echo "Suspending experiment"
	echo "`date` : ${jobnum} ${enddate} - Experiment suspended" >> ${expid}.log
	echo "To resume execute this command: qsub um73-auscom.xe"
	return false
    else
	return true
    fi

}

function submit_run {
    next_jobid=`qsub $RUNID`
    echo "Next run is submitted: ${next_jobid}" >> ${expid}.log
    echo "`date` :  Next run is submitted: ${next_jobid}" >> ${expid}.log

    epilogue
}
