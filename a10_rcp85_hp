#!/bin/ksh
# Batch script for running UM coupled with AusCOM:
# UM: vn7.3 on n96 grid
# AusCOM:
# Coupling: Oasis3, T & V grids, UM uses incoming data
# Simulation runtime: 3 days
# Np: um=8, cice=6, mom=4
# Platform: ac (sgi-altix)
#
# Things worth adjusting for different runs:
# PBS options, especially number of nodes, PEs and cpu time
# JOBDIR - src of files controling UM execution and STASH, defined in ACCESS_INIT
#          it is used by UMScr_TopLevel to copy these files from 
# UM_NPES - number of PEs for UM, currently only 1 supported
# UM_ATM_NPROCX=1 - number of PEs for UM, grid decomposition
# UM_ATM_NPROCY=1   currently only 1 supported, nprocx*nprocy==npes
# UM_MAIL_ID - to who send message about execution start/stop
# UM_START_MAIL - logical flag to send email when starting
# UM_END_MAIL - logical flag to send email when stopping
# UM_ANCIL_A - source of start up data, must match the current grid size
# ACCESS_INIT - ksh script to init oasis, cice and mom
# ACCESS_END - ksh script to postprocess output and handle auto restarts
#
#PBS -q express
#PBS -l ncpus=144
#PBS -l mem=288gb
#PBS -l walltime=4:00:00
#PBS -W umask=0022
set -x
set -eu

# PBS variables for command-line testing
: ${PBS_O_HOST:=$HOSTNAME}
: ${PBS_O_WORKDIR:=$PWD}

# Where coupled model was built
# Change as appropriate
ACCESS_BINDIR=/short/v45/aph502/ACCESS/bin


export SPEED_TEST=false

echo "Job was submitted from PBS_O_HOST $PBS_O_HOST"

# determine on which system we are running regardles
# whether job was submitted from fron-end or a
# compute node (auto restart/continuation jobs)
if [[ "$PBS_O_HOST" == "raijin"* || "$PBS_O_HOST" == "r"*{0,2}(\d) ]] ; then
        export exec_site="NCI"
        export exec_system="raijin"
else
        echo "Sorry, ACCESS is currently set on NCI platform Raijin only. "
        echo "Please see your IT export for setup in other platforms. "
        exit
fi

# calculate dir 2 levels up (UM doesn't allow .. in pathnames)
tmp=`echo $PBS_O_WORKDIR | tr -d /`
wctmp=`echo $tmp | wc -m`
wcwrk=`echo $PBS_O_WORKDIR | wc -m`
(( up2 = $wcwrk - $wctmp - 1 ))
export SYSTEMDIR=`echo $PBS_O_WORKDIR | cut -d / -f 1-$up2 `
export SHORTDIR="/short/$PROJECT/$USER"
export WORKDIR="$SHORTDIR/work"
export DATADIR="$SHORTDIR/data"
mkdir -p $WORKDIR
mkdir -p $DATADIR

export REMOTE_SUBMIT=false
export REMOTE_PFX=""

export PART=RUN
export RCF_NEW_EXEC=false
export STEP=4
export COMP_LINK_RUN="R"
export SETOPT="-x"          # Choose shell "set" options for  lower level scripts
export TYPE=NRUN
export TARGET_MC=x86_64
export SUBMITID=tst
QUEUE=normal
export RUN_TIME_LIMIT=
export NQS_PE_REQ=1
export QSUB_TIME=""
export NPROC=1

export NCPUS=UNSET
export UM_ATM_NPROCX=8
export UM_ATM_NPROCY=12
(( UM_NPES = $UM_ATM_NPROCX * $UM_ATM_NPROCY ))
export UM_NPES
export UM_OCN_NPROCX=UNSET
export UM_OCN_NPROCY=UNSET
export RCF_NPES=1
export RCF_NPROCY=1
export RCF_NPROCX=1
export LABEL=
set +x
UM_MAIL_ID=nomail

set +x
echo "*****************************************************************"
echo "   	UM Version 7.3 template, Non-Operational"
echo "    	Based on script created by UMUI v6.3"
echo "     	Modified for use with AusCOM + OASIS3"
echo "*****************************************************************"
set -x
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
export UMDIR=/projects/access/data/ACCESS_CMIP5/umdir
#??? export UMDIR=${UMDIR:=$SHORTDIR/access/v1/umdir}
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

# Model version number
export VN=7.3
export ATM_CPL_TYPE=P

# Don't panic if cannot find .umsetvars in UMDIR
# ... only "source" it, if it is there.
if test -s $UMDIR/vn$VN/$TARGET_MC/scripts/.umsetvars_$VN ; then
   echo "Sourcing  $UMDIR/vn$VN/$TARGET_MC/scripts/.umsetvars_$VN"
   . $UMDIR/vn$VN/$TARGET_MC/scripts/.umsetvars_$VN
fi

PATH=$UMDIR/vn$VN/normal/exec:$PATH

if [[ ( $HOSTNAME = "cherax" ) || ( $exec_site = "NCI" ) ]]; then
  alias banner='/bin/echo'
else
  alias banner='/access/bin/figlet -f /access/bin/fonts/banner.flf'
fi

if test -s $UMDIR/vn$VN/$TARGET_MC/scripts/umprofile ; then
   echo "Sourcing $UMDIR/vn$VN/$TARGET_MC/scripts/umprofile"
   . $UMDIR/vn$VN/$TARGET_MC/scripts/umprofile
fi
# if test -s $UMDIR/vn$VN/$TARGET_MC/scripts/setglobalvars ; then
# # set UI system variables
#    echo "Sourcing $UMDIR/vn$VN/$TARGET_MC/scripts/setglobalvars"
#    . $UMDIR/vn$VN/$TARGET_MC/scripts/setglobalvars
# fi

export UM_SECTOR_SIZE=2048                                                                                   
export NUM_F90_STEPS=1                                                                                       
export UM_PE_LABEL=                                                                                          
export MDEPOPTS="-c"                                                                                         
export LINUXMPP=true                                                                                         
export MPP=true                                                                                              
export PROGDEFS=C_LONG_INT,MPP,C_LOW_U,NEC,FRL8,NECSX6,BUFRD_IO                                              
export PBS=true   
export SGI=true

##############################################################
# Set up UM environment variables for export to lower shells #                        #
##############################################################
###################################################
# Run Identifier and Temporary Dir details        #
###################################################

set -x

tmp=`echo $PBS_O_WORKDIR | tr -cd / | wc -m`
let tmp=$tmp+1
run_id=`echo $PBS_O_WORKDIR | cut -d / -f $tmp`
export RUNID=$run_id #=hg2-r1.1-M3

EXPTALIAS="NONE"
export ACCESS=true
# define script to configure AUSCOM and UM-coupled settings before run
export ACCESS_INIT=$SYSTEMDIR/exp/$RUNID/$RUNID.init
# define script to archive results, advance date and resubmit next job
export ACCESS_END=$SYSTEMDIR/exp/$RUNID/$RUNID.fin
export UM_GRID_PFX=um96
export JOB_LINE='UM-7.3-oasis3-auscom'

###################################################
# OASIS coupling flag                             #
# set true for AusCOM run
###################################################

# OASIS is old flag remaining from old UM scripts
export OASIS=false
# this is the flag we use to mark coupled runs
export AUSCOM_CPL=true

if [ -z "${LD_LIBRARY_PATH:-}" ]; then
    export LD_LIBRARY_PATH=/apps/openmpi/1.6.5/lib/Intel
else
    export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/apps/openmpi/1.6.5/lib/Intel
fi


# for OASIS run UMScr_TopLevel and friends expect also following vars:
# OASISRUNDIR   - Working directory of OASIS
export OASISDIR=um_coupled/$RUNID
export OASISRUNDIR=$WORKDIR/$OASISDIR
[ ! -d $OASISRUNDIR ] && mkdir -p $OASISRUNDIR
[ ! -d ${OASISRUNDIR}/tmp ] && mkdir -p ${OASISRUNDIR}/tmp

export AUTO_RESTART=false
export UM_SECTOR_SIZE=2048

###################################################
# USERS bottom script source       start          #
# Makes functions available which we call later   #
###################################################
if test -f $ACCESS_END; then
    . $ACCESS_END
else
    echo "ERROR: User bottom script insert $ACCESS_END not found"
    
fi

while true
do

    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    ### START of Users top script insert
    # it's sourced with . which means it's executed inside the current shell

    if test -f $ACCESS_INIT; then
	  . $ACCESS_INIT
    else
	  echo "ERROR: User top script insert $ACCESS_INIT not found"
	exit 1
    fi
    ### END of Users top script insert
    #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


    ###################################################
    # CORE DUMP SAVING                                #
    ###################################################

    export SAVECORE=true
    export COREDUMP=$OASISRUNDIR/core.$$

    ###################################################
    # User defined environment variables              #
    ###################################################

    export FASTRUN=true

    ###################################################
    # Standard directories for input files etc        #
    # ILP: table from subindep_FilDir                 #
    ###################################################

    export UM_SPECTRAL=$UMDIR/vn$VN/ctldata/spectral
    export UM_ANCIL_A=$UMDIR/vn$VN/ancil/atmos/n96
    export UM_BUILD_GL=/not-defined
    export INPUT_DATA=/not-defined

    # same but to match the jobs for UM7.3
    export CENTRAL=$UMDIR/vn$VN
    export ANCIL_ATMOS=/projects/access/data/ancil/HadGEM3_cal365
    export CMIP5ANCIL=/projects/access/data/ancil/CMIP5
    export ANCIL_LAND=/projects/access/data/ancil/access_v2
    # Need this one for a HadGEM2 type run
    export HGPKG2=$CENTRAL/HGPKG2-365
    ###################################################
    # User defined output directories                 #
    ###################################################

    export UM_DATAW=$DATADIR/$OASISDIR	# User-specific read/write data files
    UM_DATAM=$OASISRUNDIR		# Output Dumps/PP/etc. Generated names
    UM_TMPDIR=$UM_DATAM/ATM_RUNDIR/tmp
    export DATAW=$UM_DATAW
    export DATAM=$UM_DATAM   
    #
    [ ! -d $UM_DATAW/bin ] && mkdir -p $UM_DATAW/bin
    [ ! -d $UM_DATAM/bin ] && mkdir -p $UM_DATAM/bin

    ###################################################
    # Directory pointers in environment variables     #
    ###################################################

    # For files required only during the run
    export TEMP=${UM_TMPDIR}
    export TMPDIR=${TEMP}

    # For executable files
    EXEC=$UMDIR/vn$VN/$TARGET_MC/exec

    SCRIPT=$ACCESS_BINDIR/um_scripts

    PATH=$PATH:$SCRIPT:$EXEC:$PATH
    # verify that we get the scripts from the correct location
    echo "PATH used = $PATH"
    whence qsexecute

    ###################################################
    # Directories on TARGET_MC                        #
    ###################################################

    PROD_TARGET=$DATADIR
    DATAW_TARGET=$DATAW
    DATAM_TARGET=$DATAM

    # Set false to always keep output from all PEs
    export UM_NAM_MAX_SECONDS=${UM_NAM_MAX_SECONDS:-300}
    UM_DEL_MPP_OUTPUT=false  
    # gol124: append only tail instead of whole output files
    # otherwise for large jobs the output may get so large that
    # the system would terminate the job during the append operation
    export UM_TAIL=true

    # Indicates whether operational model
    export OPERATIONAL=false       
    # Switch for automatic output processing
    export AUTOMATIC_PP=false   
    # Output class for resubmitted jobs
    export OUT_CLASSR=leave    
    # Output class for start-run jobs   
    export OUT_CLASS=leave         

    ###################################################
    # Variables relating to reconfiguration           #
    ###################################################

    # Timer for reconfiguration       
    export RCF_TIMER=false 
    # Delete recon output on success
    RCF_DEL_MPP_OUTPUT=true 
    # gol124: save for next run?
    RCF_DEL_MPP_OUTPUT=false

    # Level of print output from reconfiguration
    export RCF_PRINTSTATUS=${RCF_PRINTSTATUS:-2}

    # Indicates if Atmos reconfiguration step
    # gol124: use file from previous run
    export RCF_ATMOS=false
    # Indicates if Ocean reconfiguration step
    export RCF_OCEAN=false 
    # Flag to delete old histfile in NRUN
    export PURGEHIST=true          
    # Indicates whether OUTPUT2 is printed
    LONGOUTPUT=false        
    # PrStatus_Min, PrStatus_Normal, PrStatus_Oper or PrStatus_Diag 
    export PRINT_STATUS=${PRINT_STATUS:-PrStatus_Diag} 
    # perftrace options for perfview
    export PERFTRACE=false 
    export PERFVIEWOPT="0"

    # load module, reconfiguration
    export LOADRECON=$UMDIR/vn$VN/$TARGET_MC/execs/qxreconf

    ###################################################
    #  Model control files                            #
    ###################################################

    # Switch for printing files
    export PRINT_INPUT=false 
    # Root for system STASHmaster files
    export STASHMSTR=$UMDIR/vn$VN/ctldata/STASHmaster  
    # Root for system ANCILmaster files
    export ANCILMSTR=$UMDIR/vn$VN/ctldata/ANCILmaster  
    # Destination of standard output files
    export UM_STDOUT_FILE=$DATAW/$RUNID.fort6.pe  
    # Destination of recon atmos output files
    export RCF_STDOUT_FILE_A=$DATAW/$RUNID.fort6.rcfa.pe  
    # Destination of recon ocean output files
    export RCF_STDOUT_FILE_O=$DATAW/$RUNID.fort6.rcfo.pe  
    # Output from pe0 for model
    UM_MPP_OUTPUT="$UM_STDOUT_FILE"0          
    # Output from pe0 for recon (atm)
    RCF_MPP_OUTPUT_A="$RCF_STDOUT_FILE_A"0         
    # Output from pe0 for recon (ocn)
    RCF_MPP_OUTPUT_O="$RCF_STDOUT_FILE_O"0         
    # Output file for the job step
    PREFIXT=""
    export OUTPUT=$DATAW/$PREFIXT$RUNID.out       
    # Running submodels
    export UM_ATMOS=true 
    export UM_OCEAN=false 
    export UM_SLAB=false 
    export UM_WAVE=false

    # Indicates automatic postprocessing
    export UM_AUTOPP=$AUTOMATIC_PP
    # Indicates whether MPP run
    UM_PROCT=true 
    # Indicates a suite run
    UM_SUITE=false 
    UM_START_MAIL=false
    UM_END_MAIL=false
    UM_LOUTPUT=200000

    OPRESTART='' # Pretend we've started from the UMUI

    # Check current dir
    echo "PWD: $PWD"

    ####################################################
    # Finally call the revised top level script for UM #
    ####################################################
    set +x
    echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
    echo '@@@ starting UMScr_TopLevel:' `whence UMScr_TopLevel`
    echo '@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@'
    set -x
    FCODE=-999

    which UMScr_TopLevel
    . UMScr_TopLevel
    export RC=$?

    # Function defined in user final script to postprocess data
    finalise_model

    if walltime_remaining && continue_experiment
    then
       echo "Start another run"
    else
       # Exit loop as there is not enough time to run again
       echo "Don't run again this submit"
       break
    fi

    echo "End of never ending loop"

done

echo "Exit never ending loop"

# Submit new PBS job if appropriate
if continue_experiment
then
    # Submit a new PBS job
    submit_run
fi

exit $RC
